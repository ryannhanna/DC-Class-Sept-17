Ajax-
Asynchronous JavaScript and XML
Technique to fetch API data and update a page asynchronously
Popularized by Google Maps
Uses an API to fetch data

API-

Application Program Interface
Interface between frontend and backend

Converting to and from JSON=

JSON.stringify({age: 22});
JSON.parse('{"age": 22}');

Old School ajax:

var httpRequest;
function request_change () {
  if (httpRequest.readyState === XMLHttpRequest.DONE) {
    if (httpRequest.status === 200) {
      // do something with httpRequest.responseText
    }
}
httpRequest = new XMLHttpRequest();
httpRequest.onreadystatechange = request_change;
httpRequest.open('GET', 'http://example.com/api.json');
httpRequest.send();

Fetch Example:

var myHeaders = new Headers();
var myInit = { method: 'GET',
               headers: myHeaders,
               mode: 'cors',
               cache: 'default' };
fetch(api_url, myInit)
  .then(function(response) {
    return response.json();
  })
  .then(function(data) {
    console.log(data);
  })
  .catch(function (error) {
    console.error(error);
  });


  Axios :var api_url = 'https://api.punkapi.com/v2/beers';
var config = {
  params: {
    brewed_before: "11-2012",
    abv_gt: 6
  }
};
axios.get(api_url, config)
  .then(function (response) {
    console.log(response.data);
  })
  .catch(function (error) {
    console.error(error);
  });

  uses by json by default


  API Authnetication for Axios:
  Basic Authenication
  Key Authenication
  OAuth

  Basic Authentication for Axios:

var config = {
  auth: {
    username: 'janedoe',
    password: 's00pers3cret'
  }
}

Key Authenication - axios:

var config = {
  params: {apikey: 's00pers3cret'}
}
// or
var config = {
  headers: {apikey: 's00pers3cret'}
}

OAuth

Send User to a URL to request access to their account.
User accepts and returns with a key.
Use key to access account on their behalf.
Easiest to use API libraries provided by service
